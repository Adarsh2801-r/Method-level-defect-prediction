change: Insert: BuildListener
changed entity: SINGLE_TYPE: BuildListener
parent: SUPER_INTERFACE_TYPES: 
root: org.apache.tools.ant.AntClassLoader
change type: PARENT_INTERFACE_INSERT
====================
change: Insert: (t instanceof ClassFormatError)
changed entity: IF_STATEMENT: (t instanceof ClassFormatError)
parent: CATCH_CLAUSE: InvocationTargetException
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: STATEMENT_INSERT
====================
change: Insert: (t instanceof ClassFormatError)
changed entity: ELSE_STATEMENT: (t instanceof ClassFormatError)
parent: IF_STATEMENT: (t instanceof ClassFormatError)
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: ALTERNATIVE_PART_INSERT
====================
change: Insert: (NoClassDefFoundError) t;
changed entity: THROW_STATEMENT: (NoClassDefFoundError) t;
parent: THEN_STATEMENT: (t instanceof NoClassDefFoundError)
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: STATEMENT_INSERT
====================
change: Move: (t instanceof ClassFormatError)
changed entity: IF_STATEMENT: (t instanceof ClassFormatError)
parent: CATCH_CLAUSE: InvocationTargetException
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: STATEMENT_PARENT_CHANGE
====================
change: Update: byte[] buffer = new byte[1024];
changed entity: VARIABLE_DECLARATION_STATEMENT: byte[] buffer = new byte[1024];
parent: METHOD: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: STATEMENT_UPDATE
====================
change: Update: ((bytesRead = stream.read(buffer, 0, 1024)) != (- 1))
changed entity: WHILE_STATEMENT: ((bytesRead = stream.read(buffer, 0, 1024)) != (- 1))
parent: METHOD: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: CONDITION_EXPRESSION_CHANGE
====================
change: Update: (t instanceof ClassFormatError)
changed entity: IF_STATEMENT: (t instanceof ClassFormatError)
parent: ELSE_STATEMENT: (t instanceof ClassFormatError)
root: org.apache.tools.ant.AntClassLoader.getClassFromStream(InputStream,String)
change type: CONDITION_EXPRESSION_CHANGE
====================
change: Delete: this.systemFirst = systemFirst;
changed entity: ASSIGNMENT: this.systemFirst = systemFirst;
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
change type: STATEMENT_DELETE
====================
change: Update: this(project, classpath);
changed entity: CONSTRUCTOR_INVOCATION: this(project, classpath);
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
change type: STATEMENT_UPDATE
====================
change: Update: /**
     * Create a classloader for the given project using the classpath given.
     *
     * @param project the project to which this classloader is to belong.
     * @param classpath the classpath to use to load the classes.
     */
changed entity: JAVADOC: /**
     * Create a classloader for the given project using the classpath given.
     *
     * @param project the project to which this classloader is to belong.
     * @param classpath the classpath to use to load the classes.
     */
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
change type: DOC_UPDATE
====================
change: Update: systemFirst
changed entity: PARAMETER: systemFirst
parent: PARAMETERS: 
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path,boolean)
change type: PARAMETER_RENAMING
====================
change: Delete: ClassLoader base = AntClassLoader.class.getClassLoader();
changed entity: VARIABLE_DECLARATION_STATEMENT: ClassLoader base = AntClassLoader.class.getClassLoader();
parent: METHOD: org.apache.tools.ant.AntClassLoader.findBaseClass(String)
root: org.apache.tools.ant.AntClassLoader.findBaseClass(String)
change type: STATEMENT_DELETE
====================
change: Update: (base == null)
changed entity: IF_STATEMENT: (base == null)
parent: METHOD: org.apache.tools.ant.AntClassLoader.findBaseClass(String)
root: org.apache.tools.ant.AntClassLoader.findBaseClass(String)
change type: CONDITION_EXPRESSION_CHANGE
====================
change: Update: base.loadClass(name);
changed entity: RETURN_STATEMENT: base.loadClass(name);
parent: ELSE_STATEMENT: (base == null)
root: org.apache.tools.ant.AntClassLoader.findBaseClass(String)
change type: STATEMENT_UPDATE
====================
change: Insert: theClass;
changed entity: RETURN_STATEMENT: theClass;
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_INSERT
====================
change: Delete: // default to the global setting and then see
        // if this class belongs to a package which has been
        // designated to use a specific loader first (this one or the system one)
changed entity: LINE_COMMENT: // default to the global setting and then see
        // if this class belongs to a package which has been
        // designated to use a specific loader first (this one or the system one)
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: COMMENT_DELETE
====================
change: Delete: boolean useSystemFirst = systemFirst;
changed entity: VARIABLE_DECLARATION_STATEMENT: boolean useSystemFirst = systemFirst;
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: String packageName = (String) e.nextElement();
changed entity: VARIABLE_DECLARATION_STATEMENT: String packageName = (String) e.nextElement();
parent: FOR_STATEMENT: e.hasMoreElements()
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: useSystemFirst = true;
changed entity: ASSIGNMENT: useSystemFirst = true;
parent: THEN_STATEMENT: classname.startsWith(packageName)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: 
changed entity: BREAK_STATEMENT: 
parent: THEN_STATEMENT: classname.startsWith(packageName)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: classname.startsWith(packageName)
changed entity: IF_STATEMENT: classname.startsWith(packageName)
parent: FOR_STATEMENT: e.hasMoreElements()
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: Enumeration e = systemPackages.elements();
changed entity: VARIABLE_DECLARATION_STATEMENT: Enumeration e = systemPackages.elements();
parent: FOR_INIT: Enumeration e = systemPackages.elements();
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: e.hasMoreElements()
changed entity: FOR_STATEMENT: e.hasMoreElements()
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: String packageName = (String) e.nextElement();
changed entity: VARIABLE_DECLARATION_STATEMENT: String packageName = (String) e.nextElement();
parent: FOR_STATEMENT: e.hasMoreElements()
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: useSystemFirst = false;
changed entity: ASSIGNMENT: useSystemFirst = false;
parent: THEN_STATEMENT: classname.startsWith(packageName)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: 
changed entity: BREAK_STATEMENT: 
parent: THEN_STATEMENT: classname.startsWith(packageName)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: classname.startsWith(packageName)
changed entity: IF_STATEMENT: classname.startsWith(packageName)
parent: FOR_STATEMENT: e.hasMoreElements()
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: Enumeration e = loaderPackages.elements();
changed entity: VARIABLE_DECLARATION_STATEMENT: Enumeration e = loaderPackages.elements();
parent: FOR_INIT: Enumeration e = loaderPackages.elements();
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Delete: e.hasMoreElements()
changed entity: FOR_STATEMENT: e.hasMoreElements()
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_DELETE
====================
change: Move: useSystemFirst
changed entity: IF_STATEMENT: useSystemFirst
parent: THEN_STATEMENT: (theClass == null)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_PARENT_CHANGE
====================
change: Move: theClass;
changed entity: RETURN_STATEMENT: theClass;
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_PARENT_CHANGE
====================
change: Update: (theClass == null)
changed entity: IF_STATEMENT: (theClass == null)
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: CONDITION_EXPRESSION_CHANGE
====================
change: Update: useSystemFirst
changed entity: IF_STATEMENT: useSystemFirst
parent: METHOD: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: CONDITION_EXPRESSION_CHANGE
====================
change: Update: project.log((("Class " + classname) + " loaded from system loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log((("Class " + classname) + " loaded from system loader"), Project.MSG_DEBUG);
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_UPDATE
====================
change: Update: project.log((("Class " + classname) + " loaded from ant loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log((("Class " + classname) + " loaded from ant loader"), Project.MSG_DEBUG);
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_UPDATE
====================
change: Update: project.log((("Class " + classname) + " loaded from ant loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log((("Class " + classname) + " loaded from ant loader"), Project.MSG_DEBUG);
parent: CATCH_CLAUSE: ClassNotFoundException
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_UPDATE
====================
change: Update: project.log((("Class " + classname) + " loaded from system loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log((("Class " + classname) + " loaded from system loader"), Project.MSG_DEBUG);
parent: CATCH_CLAUSE: ClassNotFoundException
root: org.apache.tools.ant.AntClassLoader.loadClass(String,boolean)
change type: STATEMENT_UPDATE
====================
change: Insert: Exception
changed entity: CATCH_CLAUSE: Exception
parent: CATCH_CLAUSES: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_INSERT
====================
change: Insert: log(((((((("Ignoring Exception " + e.getClass().getName()) + ": ") + e.getMessage()) + " reading resource ") + resourceName) + " from ") + file), Project.MSG_VERBOSE);
changed entity: METHOD_INVOCATION: log(((((((("Ignoring Exception " + e.getClass().getName()) + ": ") + e.getMessage()) + " reading resource ") + resourceName) + " from ") + file), Project.MSG_VERBOSE);
parent: CATCH_CLAUSE: Exception
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_INSERT
====================
change: Insert: // is the zip file in the cache
changed entity: LINE_COMMENT: // is the zip file in the cache
parent: ELSE_STATEMENT: file.isDirectory()
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: COMMENT_INSERT
====================
change: Insert: ZipFile zipFile = (ZipFile) zipFiles.get(file);
changed entity: VARIABLE_DECLARATION_STATEMENT: ZipFile zipFile = (ZipFile) zipFiles.get(file);
parent: ELSE_STATEMENT: file.isDirectory()
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_INSERT
====================
change: Insert: (zipFile == null)
changed entity: IF_STATEMENT: (zipFile == null)
parent: ELSE_STATEMENT: file.isDirectory()
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_INSERT
====================
change: Insert: zipFiles.put(file, zipFile);
changed entity: METHOD_INVOCATION: zipFiles.put(file, zipFile);
parent: THEN_STATEMENT: (zipFile == null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_INSERT
====================
change: Insert: zipFile.getInputStream(entry);
changed entity: RETURN_STATEMENT: zipFile.getInputStream(entry);
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_INSERT
====================
change: Delete: // we need to read the entry out of the zip file into
                        // a baos and then
changed entity: LINE_COMMENT: // we need to read the entry out of the zip file into
                        // a baos and then
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: COMMENT_DELETE
====================
change: Delete: ByteArrayOutputStream baos = new ByteArrayOutputStream();
changed entity: VARIABLE_DECLARATION_STATEMENT: ByteArrayOutputStream baos = new ByteArrayOutputStream();
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: byte[] buffer = new byte[BUFFER_SIZE];
changed entity: VARIABLE_DECLARATION_STATEMENT: byte[] buffer = new byte[BUFFER_SIZE];
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: int bytesRead;
changed entity: VARIABLE_DECLARATION_STATEMENT: int bytesRead;
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: InputStream stream = zipFile.getInputStream(entry);
changed entity: VARIABLE_DECLARATION_STATEMENT: InputStream stream = zipFile.getInputStream(entry);
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: baos.write(buffer, 0, bytesRead);
changed entity: METHOD_INVOCATION: baos.write(buffer, 0, bytesRead);
parent: WHILE_STATEMENT: ((bytesRead = stream.read(buffer, 0, BUFFER_SIZE)) != (- 1))
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: ((bytesRead = stream.read(buffer, 0, BUFFER_SIZE)) != (- 1))
changed entity: WHILE_STATEMENT: ((bytesRead = stream.read(buffer, 0, BUFFER_SIZE)) != (- 1))
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: new ByteArrayInputStream(baos.toByteArray());
changed entity: RETURN_STATEMENT: new ByteArrayInputStream(baos.toByteArray());
parent: THEN_STATEMENT: (entry != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: ZipFile zipFile = null;
changed entity: VARIABLE_DECLARATION_STATEMENT: ZipFile zipFile = null;
parent: ELSE_STATEMENT: file.isDirectory()
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: zipFile.close();
changed entity: METHOD_INVOCATION: zipFile.close();
parent: THEN_STATEMENT: (zipFile != null)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: (zipFile != null)
changed entity: IF_STATEMENT: (zipFile != null)
parent: FINALLY: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: e.printStackTrace();
changed entity: METHOD_INVOCATION: e.printStackTrace();
parent: CATCH_CLAUSE: Exception
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: Exception
changed entity: CATCH_CLAUSE: Exception
parent: CATCH_CLAUSES: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Delete: 
changed entity: TRY_STATEMENT: 
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_DELETE
====================
change: Move: 
changed entity: TRY_STATEMENT: 
parent: ELSE_STATEMENT: file.isDirectory()
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_PARENT_CHANGE
====================
change: Move: (! file.exists())
changed entity: IF_STATEMENT: (! file.exists())
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_ORDERING_CHANGE
====================
change: Move: file.isDirectory()
changed entity: IF_STATEMENT: file.isDirectory()
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_ORDERING_CHANGE
====================
change: Move: ZipEntry entry = zipFile.getEntry(resourceName);
changed entity: VARIABLE_DECLARATION_STATEMENT: ZipEntry entry = zipFile.getEntry(resourceName);
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_PARENT_CHANGE
====================
change: Move: (entry != null)
changed entity: IF_STATEMENT: (entry != null)
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_PARENT_CHANGE
====================
change: Move: zipFile = new ZipFile(file);
changed entity: ASSIGNMENT: zipFile = new ZipFile(file);
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.getResourceStream(File,String)
change type: STATEMENT_PARENT_CHANGE
====================
change: Update: project.log(("force system loading " + classname), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log(("force system loading " + classname), Project.MSG_DEBUG);
parent: METHOD: org.apache.tools.ant.AntClassLoader.forceLoadSystemClass(String)
root: org.apache.tools.ant.AntClassLoader.forceLoadSystemClass(String)
change type: STATEMENT_UPDATE
====================
change: Update: /**
     * Load a class through this class loader but defer to the system class loader
     *
     * This ensures that instances of the returned class will be compatible with instances which
     * which have already been loaded on the system loader.
     *
     * @param classname the classname to be loaded.
     * 
     * @return the required Class object
     *
     * @throws ClassNotFoundException if the requested class does not exist on
     * this loader's classpath.
     */
changed entity: JAVADOC: /**
     * Load a class through this class loader but defer to the system class loader
     *
     * This ensures that instances of the returned class will be compatible with instances which
     * which have already been loaded on the system loader.
     *
     * @param classname the classname to be loaded.
     * 
     * @return the required Class object
     *
     * @throws ClassNotFoundException if the requested class does not exist on
     * this loader's classpath.
     */
parent: METHOD: org.apache.tools.ant.AntClassLoader.forceLoadSystemClass(String)
root: org.apache.tools.ant.AntClassLoader.forceLoadSystemClass(String)
change type: DOC_UPDATE
====================
change: Update: project.log(("force loading " + classname), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log(("force loading " + classname), Project.MSG_DEBUG);
parent: METHOD: org.apache.tools.ant.AntClassLoader.forceLoadClass(String)
root: org.apache.tools.ant.AntClassLoader.forceLoadClass(String)
change type: STATEMENT_UPDATE
====================
change: Update: /**
     * Load a class through this class loader even if that class is available on the
     * system classpath.
     *
     * This ensures that any classes which are loaded by the returned class will use this
     * classloader.
     *
     * @param classname the classname to be loaded.
     * 
     * @return the required Class object
     *
     * @throws ClassNotFoundException if the requested class does not exist on
     * this loader's classpath.
     */
changed entity: JAVADOC: /**
     * Load a class through this class loader even if that class is available on the
     * system classpath.
     *
     * This ensures that any classes which are loaded by the returned class will use this
     * classloader.
     *
     * @param classname the classname to be loaded.
     * 
     * @return the required Class object
     *
     * @throws ClassNotFoundException if the requested class does not exist on
     * this loader's classpath.
     */
parent: METHOD: org.apache.tools.ant.AntClassLoader.forceLoadClass(String)
root: org.apache.tools.ant.AntClassLoader.forceLoadClass(String)
change type: DOC_UPDATE
====================
change: Insert: isParentFirst(name)
changed entity: IF_STATEMENT: isParentFirst(name)
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: (resourceStream == null)
changed entity: IF_STATEMENT: (resourceStream == null)
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: resourceStream;
changed entity: RETURN_STATEMENT: resourceStream;
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: isParentFirst(name)
changed entity: ELSE_STATEMENT: isParentFirst(name)
parent: IF_STATEMENT: isParentFirst(name)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: ALTERNATIVE_PART_INSERT
====================
change: Insert: resourceStream = loadBaseResource(name);
changed entity: ASSIGNMENT: resourceStream = loadBaseResource(name);
parent: THEN_STATEMENT: isParentFirst(name)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: (resourceStream != null)
changed entity: IF_STATEMENT: (resourceStream != null)
parent: THEN_STATEMENT: isParentFirst(name)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: resourceStream = loadResource(name);
changed entity: ASSIGNMENT: resourceStream = loadResource(name);
parent: ELSE_STATEMENT: isParentFirst(name)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: (resourceStream != null)
changed entity: IF_STATEMENT: (resourceStream != null)
parent: ELSE_STATEMENT: isParentFirst(name)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: log(("Couldn\'t load ResourceStream for " + name), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: log(("Couldn\'t load ResourceStream for " + name), Project.MSG_DEBUG);
parent: THEN_STATEMENT: (resourceStream == null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: (resourceStream != null)
changed entity: ELSE_STATEMENT: (resourceStream != null)
parent: IF_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: ALTERNATIVE_PART_INSERT
====================
change: Insert: (resourceStream != null)
changed entity: ELSE_STATEMENT: (resourceStream != null)
parent: IF_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: ALTERNATIVE_PART_INSERT
====================
change: Insert: log((("ResourceStream for " + name) + " loaded from parent loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: log((("ResourceStream for " + name) + " loaded from parent loader"), Project.MSG_DEBUG);
parent: THEN_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: resourceStream = loadResource(name);
changed entity: ASSIGNMENT: resourceStream = loadResource(name);
parent: ELSE_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: (resourceStream != null)
changed entity: IF_STATEMENT: (resourceStream != null)
parent: ELSE_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: log((("ResourceStream for " + name) + " loaded from ant loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: log((("ResourceStream for " + name) + " loaded from ant loader"), Project.MSG_DEBUG);
parent: THEN_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: resourceStream = loadBaseResource(name);
changed entity: ASSIGNMENT: resourceStream = loadBaseResource(name);
parent: ELSE_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: (resourceStream != null)
changed entity: IF_STATEMENT: (resourceStream != null)
parent: ELSE_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: log((("ResourceStream for " + name) + " loaded from ant loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: log((("ResourceStream for " + name) + " loaded from ant loader"), Project.MSG_DEBUG);
parent: THEN_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Insert: log((("ResourceStream for " + name) + " loaded from parent loader"), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: log((("ResourceStream for " + name) + " loaded from parent loader"), Project.MSG_DEBUG);
parent: THEN_STATEMENT: (resourceStream != null)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_INSERT
====================
change: Delete: // we need to search the components of the path to see if we can find the 
        // class we want.
changed entity: LINE_COMMENT: // we need to search the components of the path to see if we can find the 
        // class we want.
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: COMMENT_DELETE
====================
change: Delete: String[] pathElements = classpath.list();
changed entity: VARIABLE_DECLARATION_STATEMENT: String[] pathElements = classpath.list();
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Delete: File pathComponent = project.resolveFile((String) pathElements[i]);
changed entity: VARIABLE_DECLARATION_STATEMENT: File pathComponent = project.resolveFile((String) pathElements[i]);
parent: FOR_STATEMENT: ((i < pathElements.length) && (stream == null))
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Delete: stream = getResourceStream(pathComponent, name);
changed entity: ASSIGNMENT: stream = getResourceStream(pathComponent, name);
parent: FOR_STATEMENT: ((i < pathElements.length) && (stream == null))
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Delete: int i = 0;
changed entity: VARIABLE_DECLARATION_STATEMENT: int i = 0;
parent: FOR_INIT: int i = 0;
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Delete: ++ i;
changed entity: PREFIX_EXPRESSION: ++ i;
parent: FOR_INCR: ++ i
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Delete: ((i < pathElements.length) && (stream == null))
changed entity: FOR_STATEMENT: ((i < pathElements.length) && (stream == null))
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Delete: stream;
changed entity: RETURN_STATEMENT: stream;
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_DELETE
====================
change: Update: InputStream stream = null;
changed entity: VARIABLE_DECLARATION_STATEMENT: InputStream stream = null;
parent: METHOD: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
root: org.apache.tools.ant.AntClassLoader.getResourceAsStream(String)
change type: STATEMENT_UPDATE
====================
change: Insert: parent = AntClassLoader.class.getClassLoader();
changed entity: ASSIGNMENT: parent = AntClassLoader.class.getClassLoader();
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: project.addBuildListener(this);
changed entity: METHOD_INVOCATION: project.addBuildListener(this);
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: (classpath != null)
changed entity: IF_STATEMENT: (classpath != null)
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: Path actualClasspath = classpath.concatSystemClasspath("ignore");
changed entity: VARIABLE_DECLARATION_STATEMENT: Path actualClasspath = classpath.concatSystemClasspath("ignore");
parent: THEN_STATEMENT: (classpath != null)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: String[] pathElements = actualClasspath.list();
changed entity: VARIABLE_DECLARATION_STATEMENT: String[] pathElements = actualClasspath.list();
parent: THEN_STATEMENT: (classpath != null)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: (i < pathElements.length)
changed entity: FOR_STATEMENT: (i < pathElements.length)
parent: THEN_STATEMENT: (classpath != null)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: 
changed entity: TRY_STATEMENT: 
parent: FOR_STATEMENT: (i < pathElements.length)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: int i = 0;
changed entity: VARIABLE_DECLARATION_STATEMENT: int i = 0;
parent: FOR_INIT: int i = 0;
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: ++ i;
changed entity: PREFIX_EXPRESSION: ++ i;
parent: FOR_INCR: ++ i
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: addPathElement((String) pathElements[i]);
changed entity: METHOD_INVOCATION: addPathElement((String) pathElements[i]);
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Insert: BuildException
changed entity: CATCH_CLAUSE: BuildException
parent: CATCH_CLAUSES: 
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_INSERT
====================
change: Delete: this.classpath = classpath.concatSystemClasspath("ignore");
changed entity: ASSIGNMENT: this.classpath = classpath.concatSystemClasspath("ignore");
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_DELETE
====================
change: Delete: // JDK > 1.1 should add these by default, but some VMs don't
changed entity: LINE_COMMENT: // JDK > 1.1 should add these by default, but some VMs don't
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: COMMENT_DELETE
====================
change: Delete: addSystemPackageRoot("java");
changed entity: METHOD_INVOCATION: addSystemPackageRoot("java");
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_DELETE
====================
change: Delete: addSystemPackageRoot("javax");
changed entity: METHOD_INVOCATION: addSystemPackageRoot("javax");
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: STATEMENT_DELETE
====================
change: Update: /**
     * Create a classloader for the given project using the classpath given.
     *
     * @param project the project to ehich this classloader is to belong.
     * @param classpath the classpath to use to load the classes.  This
     *                is combined with the system classpath in a manner
     *                determined by the value of ${build.sysclasspath}
     */
changed entity: JAVADOC: /**
     * Create a classloader for the given project using the classpath given.
     *
     * @param project the project to ehich this classloader is to belong.
     * @param classpath the classpath to use to load the classes.  This
     *                is combined with the system classpath in a manner
     *                determined by the value of ${build.sysclasspath}
     */
parent: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
root: org.apache.tools.ant.AntClassLoader.AntClassLoader(Project,Path)
change type: DOC_UPDATE
====================
change: Insert: findClassInComponents(name);
changed entity: RETURN_STATEMENT: findClassInComponents(name);
parent: METHOD: org.apache.tools.ant.AntClassLoader.findClass(String)
root: org.apache.tools.ant.AntClassLoader.findClass(String)
change type: STATEMENT_INSERT
====================
change: Delete: findClass(name, classpath);
changed entity: RETURN_STATEMENT: findClass(name, classpath);
parent: BODY: 
root: org.apache.tools.ant.AntClassLoader.findClass(String)
change type: STATEMENT_DELETE
====================
change: Delete: e;
changed entity: THROW_STATEMENT: e;
parent: CATCH_CLAUSE: ClassNotFoundException
root: org.apache.tools.ant.AntClassLoader.findClass(String)
change type: STATEMENT_DELETE
====================
change: Delete: ClassNotFoundException
changed entity: CATCH_CLAUSE: ClassNotFoundException
parent: CATCH_CLAUSES: 
root: org.apache.tools.ant.AntClassLoader.findClass(String)
change type: STATEMENT_DELETE
====================
change: Delete: 
changed entity: TRY_STATEMENT: 
parent: METHOD: org.apache.tools.ant.AntClassLoader.findClass(String)
root: org.apache.tools.ant.AntClassLoader.findClass(String)
change type: STATEMENT_DELETE
====================
change: Update: project.log(("Finding class " + name), Project.MSG_DEBUG);
changed entity: METHOD_INVOCATION: project.log(("Finding class " + name), Project.MSG_DEBUG);
parent: METHOD: org.apache.tools.ant.AntClassLoader.findClass(String)
root: org.apache.tools.ant.AntClassLoader.findClass(String)
change type: STATEMENT_UPDATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.findResources(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.findResources(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.buildStarted(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.buildStarted(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.setThreadContextLoader()
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.setThreadContextLoader()
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.initializeClass(Class)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.initializeClass(Class)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.messageLogged(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.messageLogged(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.loadResource(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.loadResource(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.getResourceURL(File,String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.getResourceURL(File,String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.isParentFirst(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.isParentFirst(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.targetFinished(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.targetFinished(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.loadBaseResource(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.loadBaseResource(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.getResource(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.getResource(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.taskStarted(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.taskStarted(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.cleanup()
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.cleanup()
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.AntClassLoader(ClassLoader,boolean)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(ClassLoader,boolean)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.taskFinished(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.taskFinished(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.targetStarted(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.targetStarted(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.findClassInComponents(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.findClassInComponents(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.log(String,int)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.log(String,int)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.AntClassLoader(ClassLoader,Project,Path,boolean)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.AntClassLoader(ClassLoader,Project,Path,boolean)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.buildFinished(BuildEvent)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.buildFinished(BuildEvent)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.resetThreadContextLoader()
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.resetThreadContextLoader()
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Insert: org.apache.tools.ant.AntClassLoader.addPathElement(String)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.addPathElement(String)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_FUNCTIONALITY
====================
change: Delete: org.apache.tools.ant.AntClassLoader.findClass(String,Path)
changed entity: METHOD: org.apache.tools.ant.AntClassLoader.findClass(String,Path)
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: REMOVED_FUNCTIONALITY
====================
change: Update: org.apache.tools.ant.AntClassLoader.systemFirst : boolean
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.systemFirst : boolean
parent: FIELD: org.apache.tools.ant.AntClassLoader.systemFirst : boolean
root: org.apache.tools.ant.AntClassLoader.parentFirst : boolean
change type: ATTRIBUTE_RENAMING
====================
change: Update: /**
     * Indicates whether the system class loader should be 
     * consulted before trying to load with this class loader. 
     */
changed entity: JAVADOC: /**
     * Indicates whether the system class loader should be 
     * consulted before trying to load with this class loader. 
     */
parent: FIELD: org.apache.tools.ant.AntClassLoader.systemFirst : boolean
root: org.apache.tools.ant.AntClassLoader.parentFirst : boolean
change type: DOC_UPDATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.setContextClassLoader : Method
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.setContextClassLoader : Method
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.isContextLoaderSaved : boolean
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.isContextLoaderSaved : boolean
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.parent : ClassLoader
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.parent : ClassLoader
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.zipFiles : Hashtable
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.zipFiles : Hashtable
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.savedContextLoader : ClassLoader
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.savedContextLoader : ClassLoader
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.pathComponents : Vector
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.pathComponents : Vector
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.getContextClassLoader : Method
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.getContextClassLoader : Method
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_OBJECT_STATE
====================
change: Delete: org.apache.tools.ant.AntClassLoader.classpath : Path
changed entity: FIELD: org.apache.tools.ant.AntClassLoader.classpath : Path
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: REMOVED_OBJECT_STATE
====================
change: Insert: org.apache.tools.ant.AntClassLoader.ResourceEnumeration
changed entity: CLASS: org.apache.tools.ant.AntClassLoader.ResourceEnumeration
parent: CLASS: org.apache.tools.ant.AntClassLoader
root: org.apache.tools.ant.AntClassLoader
change type: ADDITIONAL_CLASS
====================
